{
  parserClass="io.runescript.plugin.lang.parser.RsParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Rs"
  psiImplClassSuffix="Impl"
  psiPackage="io.runescript.plugin.lang.psi"
  psiImplPackage="io.runescript.plugin.lang.psi.impl"
  psiImplUtilClass="io.runescript.plugin.lang.psi.RsPsiImplUtil"
  elementTypeHolderClass="io.runescript.plugin.lang.psi.RsElementTypes"
  elementTypeClass="io.runescript.plugin.lang.psi.RsElementType"
  tokenTypeClass="io.runescript.plugin.lang.psi.RsElementType"
  generateTokenAccessors=true
  name(".*Expression")='Expression'
  extends(".*Expression")=Expression
  name(".*Statement")='Statement'
  extends(".*Statement")=Statement
  elementType("Arithmetic(BitwiseOr|BitwiseAnd|Additive|Multiplicative)Expression")=ArithmeticExpression
  elementType("Arithmetic(BitwiseOr|BitwiseAnd|Additive|Multiplicative)Operator")=ArithmeticOp
  elementType("(LogicalAnd|LogicalOr|Compare)Expression")=ConditionExpression
  elementType("(LogicalAnd|LogicalOr|Compare)Operator")=ConditionOp

  implements("Script")="io.runescript.plugin.lang.psi.RsControlFlowHolder"
  classHeader="// This class is automatically generated. Do not edit."

  tokens=[
    LBRACKET='['
    RBRACKET=']'
    LPAREN='('
    RPAREN=')'
    LBRACE='{'
    RBRACE='}'
    COMMA=','
    COLON=':'
    SEMICOLON=';'
    EQUAL='='
    EXCEL='!'
    GT='>'
    LT='<'
    GTE='>='
    LTE='<='
    BAR='|'
    AMPERSAND='&'
    PLUS='+'
    MINUS='-'
    STAR='*'
    SLASH='/'
    PERCENT='%'
    CARET='^'
    TILDE='~'
    DOLLAR='$'
  ]
}

File ::= Script*

Script ::= ScriptHeader StatementList {
    stubClass="io.runescript.plugin.lang.stubs.RsScriptStub"
    elementTypeFactory = "io.runescript.plugin.lang.stubs.StubElementTypeFactory.create"
    implements="com.intellij.psi.NavigatablePsiElement"
    mixin="io.runescript.plugin.lang.psi.mixin.RsScriptMixin"
}

ScriptHeader ::= ScriptName ParameterList? ReturnList? {
    mixin="io.runescript.plugin.lang.psi.mixin.RsScriptHeaderMixin"
    stubClass="io.runescript.plugin.lang.stubs.RsScriptHeaderStub"
    elementTypeFactory = "io.runescript.plugin.lang.stubs.StubElementTypeFactory.create"
}

ScriptName ::= '[' NameLiteral ',' NameLiteral ']' {
    methods=[
        triggerExpression="/NameLiteral[0]"
        nameExpression="/NameLiteral[1]"
    ]
    stubClass="io.runescript.plugin.lang.stubs.RsScriptNameStub"
    elementTypeFactory = "io.runescript.plugin.lang.stubs.StubElementTypeFactory.create"
    implements="com.intellij.psi.NavigatablePsiElement"
    mixin="io.runescript.plugin.lang.psi.mixin.RsScriptNameMixin"
}

ParameterList ::= '(' (Parameter (',' Parameter)*)? ')' {
    mixin="io.runescript.plugin.lang.psi.mixin.RsParameterListMixin"
    stubClass="io.runescript.plugin.lang.stubs.RsParameterListStub"
    elementTypeFactory = "io.runescript.plugin.lang.stubs.StubElementTypeFactory.create"
}

Parameter ::= (TypeName | ARRAY_TYPE_LITERAL) LocalVariableExpression {
    stubClass="io.runescript.plugin.lang.stubs.RsParameterStub"
    elementTypeFactory = "io.runescript.plugin.lang.stubs.StubElementTypeFactory.create"
}

ReturnList ::= '(' (TypeName (',' TypeName)*)? ')' {
    stubClass="io.runescript.plugin.lang.stubs.RsReturnListStub"
    elementTypeFactory = "io.runescript.plugin.lang.stubs.StubElementTypeFactory.create"
}

TypeName ::= TYPE_LITERAL {
    stubClass="io.runescript.plugin.lang.stubs.RsTypeNameStub"
    elementTypeFactory = "io.runescript.plugin.lang.stubs.StubElementTypeFactory.create"
}
StatementList ::= Statement* {
    mixin="io.runescript.plugin.lang.psi.mixin.RsStatementListMixin"
}
Statement ::= BlockStatement
            | IfStatement
            | WhileStatement
            | SwitchStatement
            | ReturnStatement
            | LocalVariableDeclarationStatement
            | ArrayVariableDeclarationStatement
            | AssignmentStatement
            | ExpressionStatement

BlockStatement ::= '{' StatementList '}'
IfStatement ::= IF '(' LogicalOrWrapper ')' Statement (ELSE Statement)? {
    methods=[
        trueStatement="/Statement[0]"
        falseStatement="/Statement[1]"
    ]
}
WhileStatement ::= WHILE '(' LogicalOrWrapper ')' Statement
SwitchStatement ::= SWITCH '(' Expression ')' '{' SwitchCase* '}'
SwitchCase ::= CASE SwitchCaseExpressionList ':' StatementList
private SwitchCaseExpressionList ::= SwitchCaseExpression (',' SwitchCaseExpression)*
private SwitchCaseExpression ::= Expression | DEFAULT
ReturnStatement ::= RETURN ('(' ExpressionList? ')')? ';'
LocalVariableDeclarationStatement ::= DEFINE_TYPE LocalVariableExpression ('=' Expression)? ';' {
    mixin="io.runescript.plugin.lang.psi.mixin.RsLocalVariableDeclarationStatementMixin"
    methods=[
        getNameExpression
    ]
}
ArrayVariableDeclarationStatement ::= DEFINE_TYPE LocalVariableExpression '(' Expression ')' ';'
AssignmentStatement ::= AssignableExpression '=' Expression ';'
private AssignableExpression ::= LocalVariableExpression | ScopedVariableExpression | ArrayAccessExpression
ExpressionStatement ::= Expression ';'

// Arithmetic & Bitwise Expressions

fake ArithmeticExpression ::= Expression ArithmeticOp Expression {
    methods=[
        left="/Expression[0]"
        right="/Expression[1]"
    ]
    implements="RsBinaryExpression"
}

//noinspection BnfUnusedRule
fake ArithmeticOp ::= '+' | '-' | '*' | '/' | '%' | '|' | '&'

private ArithmeticBitwiseOrWrapper ::= ArithmeticBitwiseAndWrapper ArithmeticBitwiseOrExpression*
left ArithmeticBitwiseOrExpression ::= ArithmeticBitwiseOrOperator ArithmeticBitwiseAndWrapper
ArithmeticBitwiseOrOperator ::= '|'

private ArithmeticBitwiseAndWrapper ::= ArithmeticAdditiveWrapper ArithmeticBitwiseAndExpression*
left ArithmeticBitwiseAndExpression ::= ArithmeticBitwiseAndOperator ArithmeticAdditiveWrapper
ArithmeticBitwiseAndOperator ::= '&'

private ArithmeticAdditiveWrapper ::= ArithmeticMultiplicativeWrapper ArithmeticAdditiveExpression*
left ArithmeticAdditiveExpression ::= ArithmeticAdditiveOperator ArithmeticMultiplicativeWrapper
ArithmeticAdditiveOperator ::= '+' | '-'

private ArithmeticMultiplicativeWrapper ::= ArithmeticValueExpression ArithmeticMultiplicativeExpression*
left ArithmeticMultiplicativeExpression ::= ArithmeticMultiplicativeOperator ArithmeticValueExpression
ArithmeticMultiplicativeOperator ::= '*' | '/' | '%'

ArithmeticValueExpression ::= ('(' ArithmeticBitwiseOrWrapper ')') | Expression

// Condition Expressions

fake ConditionExpression ::= Expression ConditionOp Expression {
    methods=[
        left="/Expression[0]"
        right="/Expression[1]"
    ]
    implements="RsBinaryExpression"
}

//noinspection BnfUnusedRule
fake ConditionOp ::= '|' | '&' | '!' | '>' | '<' | '>=' | '<=' | '='

private LogicalOrWrapper ::= LogicalAndWrapper LogicalOrExpression*
left LogicalOrExpression ::= LogicalOrOperator LogicalAndWrapper
LogicalOrOperator ::= '|'

private LogicalAndWrapper ::= CompareExpressionWrapper LogicalAndExpression*
left LogicalAndExpression ::= LogicalAndOperator CompareExpressionWrapper
LogicalAndOperator ::= '&'

private CompareExpressionWrapper ::= RelationalValueExpression CompareExpression?
left CompareExpression ::= CompareOperator RelationalValueExpression
CompareOperator ::= '!' | '>' | '<' | '>=' | '<=' | '='

RelationalValueExpression ::= ('(' LogicalOrWrapper ')') | Expression
// General Expressions

Expression ::= ParExpression
             | ArrayAccessExpression
             | LocalVariableExpression
             | ScopedVariableExpression
             | LiteralExpression
             | CommandExpression
             | GosubExpression
             | ConstantExpression
             | DynamicExpression
             | CalcExpression

private ExpressionList ::= Expression (',' Expression)*
ParExpression ::= '(' Expression ')'

LocalVariableExpression ::= '$' NameLiteral {
    mixin="io.runescript.plugin.lang.psi.mixin.RsLocalVariableExpressionMixin"
    stubClass="io.runescript.plugin.lang.stubs.RsLocalVariableExpressionStub"
    elementTypeFactory = "io.runescript.plugin.lang.stubs.StubElementTypeFactory.create"
    implements="io.runescript.plugin.lang.psi.RsNamedElement"
    methods=[getName setName]
}

ArrayAccessExpression ::= LocalVariableExpression '(' Expression ')'
ScopedVariableExpression ::= '%' NameLiteral
private LiteralExpression ::= IntegerLiteralExpression
                             | BooleanLiteralExpression
                             | NullLiteralExpression
                             | StringLiteralExpression
IntegerLiteralExpression ::= INTEGER
BooleanLiteralExpression ::= TRUE | FALSE
NullLiteralExpression ::= NULL
StringLiteralExpression ::= STRING_START (STRING_PART | STRING_TAG | StringInterpolationExpression)* STRING_END
StringInterpolationExpression ::= STRING_INTERPOLATION_START Expression STRING_INTERPOLATION_END
CommandExpression ::= NameLiteral ArgumentList {
    implements="com.intellij.psi.NavigatablePsiElement"
    mixin=" io.runescript.plugin.lang.psi.mixin.RsCommandExpressionMixin"
}
GosubExpression ::= '~' NameLiteral ArgumentList? {
    mixin=" io.runescript.plugin.lang.psi.mixin.RsGosubExpressionMixin"
}
ArgumentList ::= '(' ExpressionList? ')'
ConstantExpression ::= '^' NameLiteral
DynamicExpression ::= NameLiteral
CalcExpression ::= CALC '(' ArithmeticBitwiseOrWrapper ')'
NameLiteral ::= IDENTIFIER | DEFINE_TYPE | TYPE_LITERAL | ARRAY_TYPE_LITERAL | WHILE | IF | TRUE | FALSE | NULL | SWITCH | CASE {
    stubClass="io.runescript.plugin.lang.stubs.RsNameLiteralStub"
    elementTypeFactory = "io.runescript.plugin.lang.stubs.StubElementTypeFactory.create"
}