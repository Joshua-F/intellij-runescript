{
  parserClass="io.runescript.plugin.lang.parser.RsParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Rs"
  psiImplClassSuffix="Impl"
  psiPackage="io.runescript.plugin.lang.psi"
  psiImplPackage="io.runescript.plugin.lang.psi.impl"
  psiImplUtilClass="io.runescript.plugin.lang.psi.RsPsiImplUtil"
  elementTypeHolderClass="io.runescript.plugin.lang.psi.RsTypes"
  elementTypeClass="io.runescript.plugin.lang.psi.RsElementType"
  tokenTypeClass="io.runescript.plugin.lang.psi.RsElementType"

  name(".*Expression")='Expression'
  extends(".*Expression")=Expression
  name(".*Statement")='Statement'
  extends(".*Statement")=Statement
}

File ::= Script*
Script ::= ScriptHeader StatementList
ScriptHeader ::= ScriptName ParameterList? ReturnList?
ScriptName ::= LBRACKET NameLiteral COMMA NameLiteral RBRACKET

ParameterList ::= LPAREN (parameter (COMMA parameter)*)? RPAREN
parameter ::= (TYPE_NAME | ARRAY_TYPE_NAME) LocalVariableExpression
ReturnList ::= LPAREN (TYPE_NAME (COMMA TYPE_NAME)*)? RPAREN
StatementList ::= Statement*
Statement ::= BlockStatement
            | IfStatement
            | WhileStatement
            | SwitchStatement
            | ReturnStatement
            | LocalVariableDeclarationStatement
            | LocalVariableAssignmentStatement
            | ArrayVariableDeclarationStatement
            | ArrayVariableAssignmentStatement
            | ScopedVariableAssignmentStatement
            | ExpressionStatement

BlockStatement ::= LBRACE StatementList RBRACE
IfStatement ::= IF LPAREN RelationalExpression RPAREN Statement
WhileStatement ::= WHILE LPAREN RelationalExpression RPAREN Statement
SwitchStatement ::= SWITCH LPAREN Expression RPAREN LBRACE SwitchCase* RBRACE
SwitchCase ::= CASE SwitchCaseExpressionList COLON StatementList
private SwitchCaseExpressionList ::= SwitchCaseExpression (COMMA SwitchCaseExpression)*
private SwitchCaseExpression ::= Expression | DEFAULT
ReturnStatement ::= RETURN (LPAREN ExpressionList? RPAREN)? SEMICOLON
LocalVariableDeclarationStatement ::= DEFINE_TYPE LocalVariableExpression (EQUAL Expression)? SEMICOLON {
    methods=[getNameExpression]
}
LocalVariableAssignmentStatement ::= LocalVariableExpression EQUAL Expression SEMICOLON
ArrayVariableDeclarationStatement ::= DEFINE_TYPE LocalVariableExpression ParExpression SEMICOLON
ArrayVariableAssignmentStatement ::= LocalVariableExpression ParExpression EQUAL Expression SEMICOLON
ScopedVariableAssignmentStatement ::= ScopedVariableExpression EQUAL Expression SEMICOLON
ExpressionStatement ::= Expression SEMICOLON

// Relational Expressions

private RelationalExpression ::= LogicalOrWrapper

private LogicalOrWrapper ::= LogicalAndWrapper LogicalOrExpression*
left LogicalOrExpression ::= BAR LogicalAndWrapper

private LogicalAndWrapper ::= CompareExpressionWrapper LogicalAndExpression*
left LogicalAndExpression ::= AMPERSAND CompareExpressionWrapper

private CompareExpressionWrapper ::= RelationalValueExpression CompareExpression?
left CompareExpression ::= (EXCEL | GT | LT | GTE | LTE | EQUAL) RelationalValueExpression

RelationalValueExpression ::= (LPAREN RelationalExpression RPAREN) | Expression

// Arithmetic & Bitwise Expressions

ArithmeticExpression ::= ArithmeticBitwiseOrWrapper

private ArithmeticBitwiseOrWrapper ::= ArithmeticBitwiseAndWrapper ArithmeticBitwiseOrExpression*
left ArithmeticBitwiseOrExpression ::= BAR ArithmeticBitwiseAndWrapper

private ArithmeticBitwiseAndWrapper ::= ArithmeticAdditiveWrapper ArithmeticBitwiseAndExpression*
left ArithmeticBitwiseAndExpression ::= AMPERSAND ArithmeticAdditiveWrapper

private ArithmeticAdditiveWrapper ::= ArithmeticMultiplicativeWrapper ArithmeticAdditiveExpression*
left ArithmeticAdditiveExpression ::= (PLUS | MINUS) ArithmeticMultiplicativeWrapper

private ArithmeticMultiplicativeWrapper ::= ArithmeticValueExpression ArithmeticMultiplicativeExpression*
left ArithmeticMultiplicativeExpression ::= (STAR | SLASH | PERCENT) ArithmeticValueExpression

ArithmeticValueExpression ::= (LPAREN ArithmeticExpression RPAREN) | Expression

// General Expressions
Expression ::= ParExpression
             | ArrayVariableExpression
             | LocalVariableExpression
             | ScopedVariableExpression
             | LiteralExpression
             | CommandExpression
             | GosubExpression
             | ConstantExpression
             | DynamicExpression
             | CalcExpression

CalcExpression ::= CALC LPAREN ArithmeticExpression RPAREN
private ExpressionList ::= Expression (COMMA Expression)*
ParExpression ::= LPAREN Expression RPAREN

LocalVariableExpression ::= DOLLAR NameLiteral {
    mixin="io.runescript.plugin.lang.psi.impl.naned.RsNamedElementImpl"
    implements="io.runescript.plugin.lang.psi.named.RsNamedElement"
    methods=[getName setName getNameIdentifier]
}

ArrayVariableExpression ::= LocalVariableExpression LPAREN Expression RPAREN
ScopedVariableExpression ::= MOD NameLiteral
private LiteralExpression ::= IntegerLiteralExpression
                             | BooleanLiteralExpression
                             | NullLiteralExpression
                             | StringLiteralExpression
IntegerLiteralExpression ::= INTEGER
BooleanLiteralExpression ::= TRUE | FALSE
NullLiteralExpression ::= NULL
StringLiteralExpression ::= STRING_START (STRING_PART | STRING_TAG | StringInterpolationExpression)* STRING_END
StringInterpolationExpression ::= STRING_INTERPOLATION_START | Expression | STRING_INTERPOLATION_END
ConstantExpression ::= CARET NameLiteral
CommandExpression ::= NameLiteral (LPAREN ExpressionList? RPAREN)?
GosubExpression ::= TILDE NameLiteral (LPAREN ExpressionList? RPAREN)?
DynamicExpression ::= NameLiteral
NameLiteral ::= IDENTIFIER | DEFINE_TYPE | ARRAY_TYPE_NAME | WHILE | IF | TRUE | FALSE | NULL | SWITCH | CASE